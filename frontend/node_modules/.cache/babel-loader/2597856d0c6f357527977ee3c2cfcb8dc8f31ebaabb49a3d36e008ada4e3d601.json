{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { stringToColor, getQuarterCode } from \"./utils\";\nexport const useCourses = () => {\n  _s();\n  const [courses, setCourses] = useState([]);\n  const [forceList, setForceList] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const handleAddCourse = (courseName, section) => {\n    if (courses.some(course => course.name === `${courseName} ${section}`)) {\n      return false;\n    }\n    const newCourse = {\n      name: `${courseName} ${section}`,\n      forced: false\n    };\n    setCourses([...courses, newCourse]);\n    return true;\n  };\n  const handleRemoveCourse = courseName => {\n    setCourses(courses.filter(course => course.name !== courseName));\n    setForceList(forceList.filter(course => course !== courseName));\n  };\n  const handleToggleForce = courseName => {\n    setCourses(courses.map(course => course.name === courseName ? {\n      ...course,\n      forced: !course.forced\n    } : course));\n    if (forceList.includes(courseName)) {\n      setForceList(forceList.filter(course => course !== courseName));\n    } else {\n      setForceList([...forceList, courseName]);\n    }\n  };\n  return {\n    courses,\n    forceList,\n    errorMessage,\n    setErrorMessage,\n    handleAddCourse,\n    handleRemoveCourse,\n    handleToggleForce\n  };\n};\n_s(useCourses, \"w58zCl4CaOApMUI4mqzQTWEaxnc=\");\nexport const useSchedules = (setAllSchedules, setCurrentSchedule, displayScheduleFn,\n// Renamed to avoid conflict\ncurrentSchedule, setErrorMessage,\n// Added setErrorMessage parameter\nsortSchedules // Added sortSchedules parameter\n) => {\n  _s2();\n  const generateJSON = (courses, forceList, min, max, term, quarter) => {\n    if (courses.length < min) {\n      setErrorMessage(\"Cannot have less courses than minimum courses in a schedule.\");\n      return;\n    }\n    if (forceList.length > max) {\n      setErrorMessage(\"Cannot have more forced courses than maximum courses in a schedule.\");\n      return;\n    }\n    const quarterCode = getQuarterCode(quarter);\n    const scheduleinfo = {\n      courses: courses.map(course => course.name),\n      force: forceList,\n      min: min,\n      max: max,\n      term: `${term}${quarterCode}`\n    };\n    const json = JSON.stringify(scheduleinfo);\n    console.log(json);\n    fetch(\"/schedule-optimizer\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: json\n    }).then(response => response.json()).then(response => {\n      console.log(response);\n      if (response.errors && response.errors.length > 0) {\n        setErrorMessage(response.errors.join(\"<br>\"));\n        if (response.warnings && response.warnings.length > 0) {\n          setErrorMessage(prev => prev + \"<br>\" + response.warnings.join(\"<br>\"));\n        }\n      } else {\n        if (response.warnings && response.warnings.length > 0) {\n          setErrorMessage(response.warnings.join(\"<br>\"));\n        }\n        setAllSchedules(response.schedules);\n        sortSchedules(response.schedules);\n        setCurrentSchedule(0);\n        displayScheduleFn(response.schedules[0]);\n      }\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  };\n  const addCoursesToCalendar = useCallback(schedule => {\n    const courses = schedule.courses;\n    const cornerCell = document.getElementById(\"cornerCell\");\n    cornerCell.textContent = `Schedule ${currentSchedule}`;\n    courses.forEach(course => {\n      const days = course.days.split(\"\");\n      const startTime = parseInt(course.start_time);\n      const endTime = parseInt(course.end_time);\n      days.forEach(day => {\n        let startHour = Math.floor(startTime / 100);\n        let endHour = Math.ceil(endTime / 100);\n        for (let i = startHour; i < endHour; i++) {\n          if (i < 10) {\n            i = `0${i}`;\n          }\n          const cellId = `${day}-${i}00`;\n          const cell = document.getElementById(cellId);\n          const bgColor = stringToColor(course.crn);\n          cell.style.backgroundColor = bgColor;\n          cell.innerHTML = `<b>${course.subject}</b><br>${course.instructor}<br>${course.crn}<br>${course.room}`;\n          cell.classList.add(\"scheduled-course\");\n        }\n      });\n      if (course.lab_days) {\n        const labDays = course.lab_days.split(\"\");\n        const labStart = parseInt(course.lab_start_time);\n        const labEnd = parseInt(course.lab_end_time);\n        labDays.forEach(labDay => {\n          let labStartHour = Math.floor(labStart / 100);\n          let labEndHour = Math.ceil(labEnd / 100);\n          for (let i = labStartHour; i < labEndHour; i++) {\n            if (i < 10) {\n              i = `0${i}`;\n            }\n            const cellId = `${labDay}-${i}00`;\n            const cell = document.getElementById(cellId);\n            const bgColor = stringToColor(course.crn);\n            cell.style.backgroundColor = bgColor;\n            cell.innerHTML = `<b>${course.subject} LAB</b><br>${course.instructor}<br>${course.crn}<br>${course.lab_room}`;\n            cell.classList.add(\"scheduled-course\");\n          }\n        });\n      }\n    });\n  }, [currentSchedule]);\n  const clearSchedule = useCallback(() => {\n    const table = document.getElementById(\"calendar\");\n    const elements = table.getElementsByTagName(\"*\");\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.id) {\n        element.textContent = \"\";\n        element.style = \"\";\n        element.classList.remove(\"scheduled-course\");\n      }\n    }\n  }, []);\n  const displaySchedule = useCallback(schedule => {\n    if (!schedule || !schedule.courses) {\n      console.error(\"Invalid schedule:\", schedule);\n      return;\n    }\n    clearSchedule();\n    addCoursesToCalendar(schedule);\n  }, [clearSchedule, addCoursesToCalendar]);\n  return {\n    generateJSON,\n    addCoursesToCalendar,\n    clearSchedule,\n    displaySchedule\n  };\n};\n_s2(useSchedules, \"jV39mXfNUFaVN3knNBjKI7gXUkc=\");","map":{"version":3,"names":["useState","useCallback","stringToColor","getQuarterCode","useCourses","_s","courses","setCourses","forceList","setForceList","errorMessage","setErrorMessage","handleAddCourse","courseName","section","some","course","name","newCourse","forced","handleRemoveCourse","filter","handleToggleForce","map","includes","useSchedules","setAllSchedules","setCurrentSchedule","displayScheduleFn","currentSchedule","sortSchedules","_s2","generateJSON","min","max","term","quarter","length","quarterCode","scheduleinfo","force","json","JSON","stringify","console","log","fetch","method","headers","body","then","response","errors","join","warnings","prev","schedules","catch","error","addCoursesToCalendar","schedule","cornerCell","document","getElementById","textContent","forEach","days","split","startTime","parseInt","start_time","endTime","end_time","day","startHour","Math","floor","endHour","ceil","i","cellId","cell","bgColor","crn","style","backgroundColor","innerHTML","subject","instructor","room","classList","add","lab_days","labDays","labStart","lab_start_time","labEnd","lab_end_time","labDay","labStartHour","labEndHour","lab_room","clearSchedule","table","elements","getElementsByTagName","element","id","remove","displaySchedule"],"sources":["/home/konnorkooi/code/Side-projects/schedule-optimizer/src/useCourses.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { stringToColor, getQuarterCode } from \"./utils\";\n\nexport const useCourses = () => {\n    const [courses, setCourses] = useState([]);\n    const [forceList, setForceList] = useState([]);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    const handleAddCourse = (courseName, section) => {\n        if (\n            courses.some((course) => course.name === `${courseName} ${section}`)\n        ) {\n            return false;\n        }\n\n        const newCourse = {\n            name: `${courseName} ${section}`,\n            forced: false,\n        };\n\n        setCourses([...courses, newCourse]);\n        return true;\n    };\n\n    const handleRemoveCourse = (courseName) => {\n        setCourses(courses.filter((course) => course.name !== courseName));\n        setForceList(forceList.filter((course) => course !== courseName));\n    };\n\n    const handleToggleForce = (courseName) => {\n        setCourses(\n            courses.map((course) =>\n                course.name === courseName\n                    ? { ...course, forced: !course.forced }\n                    : course\n            )\n        );\n        if (forceList.includes(courseName)) {\n            setForceList(forceList.filter((course) => course !== courseName));\n        } else {\n            setForceList([...forceList, courseName]);\n        }\n    };\n\n    return {\n        courses,\n        forceList,\n        errorMessage,\n        setErrorMessage,\n        handleAddCourse,\n        handleRemoveCourse,\n        handleToggleForce,\n    };\n};\n\nexport const useSchedules = (\n    setAllSchedules,\n    setCurrentSchedule,\n    displayScheduleFn, // Renamed to avoid conflict\n    currentSchedule,\n    setErrorMessage, // Added setErrorMessage parameter\n    sortSchedules // Added sortSchedules parameter\n) => {\n    const generateJSON = (courses, forceList, min, max, term, quarter) => {\n        if (courses.length < min) {\n            setErrorMessage(\n                \"Cannot have less courses than minimum courses in a schedule.\"\n            );\n            return;\n        }\n\n        if (forceList.length > max) {\n            setErrorMessage(\n                \"Cannot have more forced courses than maximum courses in a schedule.\"\n            );\n            return;\n        }\n\n        const quarterCode = getQuarterCode(quarter);\n\n        const scheduleinfo = {\n            courses: courses.map((course) => course.name),\n            force: forceList,\n            min: min,\n            max: max,\n            term: `${term}${quarterCode}`,\n        };\n\n        const json = JSON.stringify(scheduleinfo);\n        console.log(json);\n\n        fetch(\"/schedule-optimizer\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: json,\n        })\n            .then((response) => response.json())\n            .then((response) => {\n                console.log(response);\n                if (response.errors && response.errors.length > 0) {\n                    setErrorMessage(response.errors.join(\"<br>\"));\n                    if (response.warnings && response.warnings.length > 0) {\n                        setErrorMessage(\n                            (prev) =>\n                                prev + \"<br>\" + response.warnings.join(\"<br>\")\n                        );\n                    }\n                } else {\n                    if (response.warnings && response.warnings.length > 0) {\n                        setErrorMessage(response.warnings.join(\"<br>\"));\n                    }\n                    setAllSchedules(response.schedules);\n                    sortSchedules(response.schedules);\n                    setCurrentSchedule(0);\n                    displayScheduleFn(response.schedules[0]);\n                }\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    };\n\n    const addCoursesToCalendar = useCallback(\n        (schedule) => {\n            const courses = schedule.courses;\n            const cornerCell = document.getElementById(\"cornerCell\");\n            cornerCell.textContent = `Schedule ${currentSchedule}`;\n\n            courses.forEach((course) => {\n                const days = course.days.split(\"\");\n                const startTime = parseInt(course.start_time);\n                const endTime = parseInt(course.end_time);\n\n                days.forEach((day) => {\n                    let startHour = Math.floor(startTime / 100);\n                    let endHour = Math.ceil(endTime / 100);\n                    for (let i = startHour; i < endHour; i++) {\n                        if (i < 10) {\n                            i = `0${i}`;\n                        }\n                        const cellId = `${day}-${i}00`;\n                        const cell = document.getElementById(cellId);\n                        const bgColor = stringToColor(course.crn);\n\n                        cell.style.backgroundColor = bgColor;\n                        cell.innerHTML = `<b>${course.subject}</b><br>${course.instructor}<br>${course.crn}<br>${course.room}`;\n                        cell.classList.add(\"scheduled-course\");\n                    }\n                });\n\n                if (course.lab_days) {\n                    const labDays = course.lab_days.split(\"\");\n                    const labStart = parseInt(course.lab_start_time);\n                    const labEnd = parseInt(course.lab_end_time);\n                    labDays.forEach((labDay) => {\n                        let labStartHour = Math.floor(labStart / 100);\n                        let labEndHour = Math.ceil(labEnd / 100);\n                        for (let i = labStartHour; i < labEndHour; i++) {\n                            if (i < 10) {\n                                i = `0${i}`;\n                            }\n                            const cellId = `${labDay}-${i}00`;\n                            const cell = document.getElementById(cellId);\n                            const bgColor = stringToColor(course.crn);\n\n                            cell.style.backgroundColor = bgColor;\n                            cell.innerHTML = `<b>${course.subject} LAB</b><br>${course.instructor}<br>${course.crn}<br>${course.lab_room}`;\n                            cell.classList.add(\"scheduled-course\");\n                        }\n                    });\n                }\n            });\n        },\n        [currentSchedule]\n    );\n\n    const clearSchedule = useCallback(() => {\n        const table = document.getElementById(\"calendar\");\n        const elements = table.getElementsByTagName(\"*\");\n\n        for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            if (element.id) {\n                element.textContent = \"\";\n                element.style = \"\";\n                element.classList.remove(\"scheduled-course\");\n            }\n        }\n    }, []);\n\n    const displaySchedule = useCallback(\n        (schedule) => {\n            if (!schedule || !schedule.courses) {\n                console.error(\"Invalid schedule:\", schedule);\n                return;\n            }\n\n            clearSchedule();\n            addCoursesToCalendar(schedule);\n        },\n        [clearSchedule, addCoursesToCalendar]\n    );\n\n    return {\n        generateJSON,\n        addCoursesToCalendar,\n        clearSchedule,\n        displaySchedule,\n    };\n};\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,aAAa,EAAEC,cAAc,QAAQ,SAAS;AAEvD,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMY,eAAe,GAAGA,CAACC,UAAU,EAAEC,OAAO,KAAK;IAC7C,IACIR,OAAO,CAACS,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,KAAK,GAAGJ,UAAU,IAAIC,OAAO,EAAE,CAAC,EACtE;MACE,OAAO,KAAK;IAChB;IAEA,MAAMI,SAAS,GAAG;MACdD,IAAI,EAAE,GAAGJ,UAAU,IAAIC,OAAO,EAAE;MAChCK,MAAM,EAAE;IACZ,CAAC;IAEDZ,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEY,SAAS,CAAC,CAAC;IACnC,OAAO,IAAI;EACf,CAAC;EAED,MAAME,kBAAkB,GAAIP,UAAU,IAAK;IACvCN,UAAU,CAACD,OAAO,CAACe,MAAM,CAAEL,MAAM,IAAKA,MAAM,CAACC,IAAI,KAAKJ,UAAU,CAAC,CAAC;IAClEJ,YAAY,CAACD,SAAS,CAACa,MAAM,CAAEL,MAAM,IAAKA,MAAM,KAAKH,UAAU,CAAC,CAAC;EACrE,CAAC;EAED,MAAMS,iBAAiB,GAAIT,UAAU,IAAK;IACtCN,UAAU,CACND,OAAO,CAACiB,GAAG,CAAEP,MAAM,IACfA,MAAM,CAACC,IAAI,KAAKJ,UAAU,GACpB;MAAE,GAAGG,MAAM;MAAEG,MAAM,EAAE,CAACH,MAAM,CAACG;IAAO,CAAC,GACrCH,MACV,CACJ,CAAC;IACD,IAAIR,SAAS,CAACgB,QAAQ,CAACX,UAAU,CAAC,EAAE;MAChCJ,YAAY,CAACD,SAAS,CAACa,MAAM,CAAEL,MAAM,IAAKA,MAAM,KAAKH,UAAU,CAAC,CAAC;IACrE,CAAC,MAAM;MACHJ,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEK,UAAU,CAAC,CAAC;IAC5C;EACJ,CAAC;EAED,OAAO;IACHP,OAAO;IACPE,SAAS;IACTE,YAAY;IACZC,eAAe;IACfC,eAAe;IACfQ,kBAAkB;IAClBE;EACJ,CAAC;AACL,CAAC;AAACjB,EAAA,CAlDWD,UAAU;AAoDvB,OAAO,MAAMqB,YAAY,GAAGA,CACxBC,eAAe,EACfC,kBAAkB,EAClBC,iBAAiB;AAAE;AACnBC,eAAe,EACflB,eAAe;AAAE;AACjBmB,aAAa,CAAC;AAAA,KACb;EAAAC,GAAA;EACD,MAAMC,YAAY,GAAGA,CAAC1B,OAAO,EAAEE,SAAS,EAAEyB,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;IAClE,IAAI9B,OAAO,CAAC+B,MAAM,GAAGJ,GAAG,EAAE;MACtBtB,eAAe,CACX,8DACJ,CAAC;MACD;IACJ;IAEA,IAAIH,SAAS,CAAC6B,MAAM,GAAGH,GAAG,EAAE;MACxBvB,eAAe,CACX,qEACJ,CAAC;MACD;IACJ;IAEA,MAAM2B,WAAW,GAAGnC,cAAc,CAACiC,OAAO,CAAC;IAE3C,MAAMG,YAAY,GAAG;MACjBjC,OAAO,EAAEA,OAAO,CAACiB,GAAG,CAAEP,MAAM,IAAKA,MAAM,CAACC,IAAI,CAAC;MAC7CuB,KAAK,EAAEhC,SAAS;MAChByB,GAAG,EAAEA,GAAG;MACRC,GAAG,EAAEA,GAAG;MACRC,IAAI,EAAE,GAAGA,IAAI,GAAGG,WAAW;IAC/B,CAAC;IAED,MAAMG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,YAAY,CAAC;IACzCK,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;IAEjBK,KAAK,CAAC,qBAAqB,EAAE;MACzBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAER;IACV,CAAC,CAAC,CACGS,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACV,IAAI,CAAC,CAAC,CAAC,CACnCS,IAAI,CAAEC,QAAQ,IAAK;MAChBP,OAAO,CAACC,GAAG,CAACM,QAAQ,CAAC;MACrB,IAAIA,QAAQ,CAACC,MAAM,IAAID,QAAQ,CAACC,MAAM,CAACf,MAAM,GAAG,CAAC,EAAE;QAC/C1B,eAAe,CAACwC,QAAQ,CAACC,MAAM,CAACC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAIF,QAAQ,CAACG,QAAQ,IAAIH,QAAQ,CAACG,QAAQ,CAACjB,MAAM,GAAG,CAAC,EAAE;UACnD1B,eAAe,CACV4C,IAAI,IACDA,IAAI,GAAG,MAAM,GAAGJ,QAAQ,CAACG,QAAQ,CAACD,IAAI,CAAC,MAAM,CACrD,CAAC;QACL;MACJ,CAAC,MAAM;QACH,IAAIF,QAAQ,CAACG,QAAQ,IAAIH,QAAQ,CAACG,QAAQ,CAACjB,MAAM,GAAG,CAAC,EAAE;UACnD1B,eAAe,CAACwC,QAAQ,CAACG,QAAQ,CAACD,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD;QACA3B,eAAe,CAACyB,QAAQ,CAACK,SAAS,CAAC;QACnC1B,aAAa,CAACqB,QAAQ,CAACK,SAAS,CAAC;QACjC7B,kBAAkB,CAAC,CAAC,CAAC;QACrBC,iBAAiB,CAACuB,QAAQ,CAACK,SAAS,CAAC,CAAC,CAAC,CAAC;MAC5C;IACJ,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MACdd,OAAO,CAACc,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC,CAAC,CAAC;EACV,CAAC;EAED,MAAMC,oBAAoB,GAAG1D,WAAW,CACnC2D,QAAQ,IAAK;IACV,MAAMtD,OAAO,GAAGsD,QAAQ,CAACtD,OAAO;IAChC,MAAMuD,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;IACxDF,UAAU,CAACG,WAAW,GAAG,YAAYnC,eAAe,EAAE;IAEtDvB,OAAO,CAAC2D,OAAO,CAAEjD,MAAM,IAAK;MACxB,MAAMkD,IAAI,GAAGlD,MAAM,CAACkD,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC;MAClC,MAAMC,SAAS,GAAGC,QAAQ,CAACrD,MAAM,CAACsD,UAAU,CAAC;MAC7C,MAAMC,OAAO,GAAGF,QAAQ,CAACrD,MAAM,CAACwD,QAAQ,CAAC;MAEzCN,IAAI,CAACD,OAAO,CAAEQ,GAAG,IAAK;QAClB,IAAIC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACR,SAAS,GAAG,GAAG,CAAC;QAC3C,IAAIS,OAAO,GAAGF,IAAI,CAACG,IAAI,CAACP,OAAO,GAAG,GAAG,CAAC;QACtC,KAAK,IAAIQ,CAAC,GAAGL,SAAS,EAAEK,CAAC,GAAGF,OAAO,EAAEE,CAAC,EAAE,EAAE;UACtC,IAAIA,CAAC,GAAG,EAAE,EAAE;YACRA,CAAC,GAAG,IAAIA,CAAC,EAAE;UACf;UACA,MAAMC,MAAM,GAAG,GAAGP,GAAG,IAAIM,CAAC,IAAI;UAC9B,MAAME,IAAI,GAAGnB,QAAQ,CAACC,cAAc,CAACiB,MAAM,CAAC;UAC5C,MAAME,OAAO,GAAGhF,aAAa,CAACc,MAAM,CAACmE,GAAG,CAAC;UAEzCF,IAAI,CAACG,KAAK,CAACC,eAAe,GAAGH,OAAO;UACpCD,IAAI,CAACK,SAAS,GAAG,MAAMtE,MAAM,CAACuE,OAAO,WAAWvE,MAAM,CAACwE,UAAU,OAAOxE,MAAM,CAACmE,GAAG,OAAOnE,MAAM,CAACyE,IAAI,EAAE;UACtGR,IAAI,CAACS,SAAS,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC1C;MACJ,CAAC,CAAC;MAEF,IAAI3E,MAAM,CAAC4E,QAAQ,EAAE;QACjB,MAAMC,OAAO,GAAG7E,MAAM,CAAC4E,QAAQ,CAACzB,KAAK,CAAC,EAAE,CAAC;QACzC,MAAM2B,QAAQ,GAAGzB,QAAQ,CAACrD,MAAM,CAAC+E,cAAc,CAAC;QAChD,MAAMC,MAAM,GAAG3B,QAAQ,CAACrD,MAAM,CAACiF,YAAY,CAAC;QAC5CJ,OAAO,CAAC5B,OAAO,CAAEiC,MAAM,IAAK;UACxB,IAAIC,YAAY,GAAGxB,IAAI,CAACC,KAAK,CAACkB,QAAQ,GAAG,GAAG,CAAC;UAC7C,IAAIM,UAAU,GAAGzB,IAAI,CAACG,IAAI,CAACkB,MAAM,GAAG,GAAG,CAAC;UACxC,KAAK,IAAIjB,CAAC,GAAGoB,YAAY,EAAEpB,CAAC,GAAGqB,UAAU,EAAErB,CAAC,EAAE,EAAE;YAC5C,IAAIA,CAAC,GAAG,EAAE,EAAE;cACRA,CAAC,GAAG,IAAIA,CAAC,EAAE;YACf;YACA,MAAMC,MAAM,GAAG,GAAGkB,MAAM,IAAInB,CAAC,IAAI;YACjC,MAAME,IAAI,GAAGnB,QAAQ,CAACC,cAAc,CAACiB,MAAM,CAAC;YAC5C,MAAME,OAAO,GAAGhF,aAAa,CAACc,MAAM,CAACmE,GAAG,CAAC;YAEzCF,IAAI,CAACG,KAAK,CAACC,eAAe,GAAGH,OAAO;YACpCD,IAAI,CAACK,SAAS,GAAG,MAAMtE,MAAM,CAACuE,OAAO,eAAevE,MAAM,CAACwE,UAAU,OAAOxE,MAAM,CAACmE,GAAG,OAAOnE,MAAM,CAACqF,QAAQ,EAAE;YAC9GpB,IAAI,CAACS,SAAS,CAACC,GAAG,CAAC,kBAAkB,CAAC;UAC1C;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN,CAAC,EACD,CAAC9D,eAAe,CACpB,CAAC;EAED,MAAMyE,aAAa,GAAGrG,WAAW,CAAC,MAAM;IACpC,MAAMsG,KAAK,GAAGzC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC;IACjD,MAAMyC,QAAQ,GAAGD,KAAK,CAACE,oBAAoB,CAAC,GAAG,CAAC;IAEhD,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyB,QAAQ,CAACnE,MAAM,EAAE0C,CAAC,EAAE,EAAE;MACtC,MAAM2B,OAAO,GAAGF,QAAQ,CAACzB,CAAC,CAAC;MAC3B,IAAI2B,OAAO,CAACC,EAAE,EAAE;QACZD,OAAO,CAAC1C,WAAW,GAAG,EAAE;QACxB0C,OAAO,CAACtB,KAAK,GAAG,EAAE;QAClBsB,OAAO,CAAChB,SAAS,CAACkB,MAAM,CAAC,kBAAkB,CAAC;MAChD;IACJ;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,eAAe,GAAG5G,WAAW,CAC9B2D,QAAQ,IAAK;IACV,IAAI,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACtD,OAAO,EAAE;MAChCsC,OAAO,CAACc,KAAK,CAAC,mBAAmB,EAAEE,QAAQ,CAAC;MAC5C;IACJ;IAEA0C,aAAa,CAAC,CAAC;IACf3C,oBAAoB,CAACC,QAAQ,CAAC;EAClC,CAAC,EACD,CAAC0C,aAAa,EAAE3C,oBAAoB,CACxC,CAAC;EAED,OAAO;IACH3B,YAAY;IACZ2B,oBAAoB;IACpB2C,aAAa;IACbO;EACJ,CAAC;AACL,CAAC;AAAC9E,GAAA,CA5JWN,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}